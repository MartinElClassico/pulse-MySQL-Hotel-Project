Hotelldirektör:
    [NF1] Skicka erbjudanden via mejl ("skicka erbjudanden till tidigare kunder")
        - viz. hitta mejl addresser till kunder, med namn och dylikt
        - viz. hitta erbjudanden. 
    -- hitta vad som är relevant i kund.
    SELECT 
        ROW_NUMBER() OVER (ORDER BY kund_id) AS '#',
        mejl_address,
        fornamn,
        efternamn
        FROM
            kund
        LIMIT 10;
    select mejl_address, fornamn, efternamn from kund;
    -- alla nutida och framtida erbjudanden.
    SELECT 
        ROW_NUMBER() OVER (ORDER BY erbjudande_id) AS '#',
        e.*
    FROM erbjudande e WHERE (
            (
            NOW() <= slut 
            OR 
            slut IS NULL
            )
        )
        LIMIT 10;

    [NF2] Lägga in erbjudandens giltighetstid
    INSERT INTO erbjudande (prisavdrag, villkor, start, slut) 
        VALUES  (284.39, 'PLACEHOLDER villkor', '2025-09-12 22:05:45', '2025-10-11 15:36:19');
        ** enkel
        - viz. update
    *** SQL::::
        SET @usergiven_start_date = '2024-10-15 00:00:00', @usergiven_end_date = '2024-11-15 23:59:59',
        @usergiven_e_id = 14;
        update erbjudande 
        SET start = @usergiven_start_date, slut = @usergiven_end_date
        WHERE erbjudande_id = @usergiven_e_id;
        SELECT * FROM erbjudande, WHERE erbjudande_id = @usergiven_e_id:
    

    [NF3] Statistik på vilken typ av rum som är attraktiva en viss period
    FIXME: add sample date range to SQL query.
        - först definera perioden <- input
        - bokning: lista över incheckning som faller inom denna tidsram.
        -> ta fram rum därifrån.
        -> från rum hitta rumtyp, räkna  (count) antal av varje rumtyp.
        *** SQL ::::
        SET @usergiven_start_date = '2024-10-01', @usergiven_end_date = '2024-10-31';
        SELECT 
            ROW_NUMBER() OVER (ORDER BY erbjudande_id) AS '#',
            rt.rum_typ_id, 
            COUNT(*) AS antal_bokningar
        FROM bokning b
        INNER JOIN rum r ON b.rum_id = r.rum_id -- now we only have rooms that have been booked.
        INNER JOIN rum_typ rt ON r.rum_typ_id = rt.rum_typ_id -- so that it selects the same for count
        WHERE b.incheckning BETWEEN @usergiven_start_date AND @usergiven_end_date -- dates are manually inputed.
        GROUP BY rt.rum_typ_id
        ORDER BY antal_bokningar DESC; -- want to see most attractive first.




    [NF4] Se när det är middag bokad och för hur många personer 
        - SELECT X, y from middag. (order by date)
        ** EXAMPLE QUERY:
        SELECT 
            ROW_NUMBER() OVER (ORDER BY erbjudande_id) AS '#',
            datum, 
            antal_personer, 
            grupp_bokning_id 
        FROM middag 
        ORDER BY datum;


    [NF5] Uppdatera hur många personer som ska äta
        ** enkel
        - update statement
        *** SQLx2::::
        SET @usergiven_m_id = 1, @usergiven_a_p = 5;
        UPDATE middag
        SET antal_personer = @usergiven_a_p
        WHERE middag_id = @usergiven_m_id
        ** QUERY2:
        -- usecase example: en person har blivit sjuk och ska inte vara med på middagen men sova i rummet.
        SET @usergiven_m_id = 1;
        UPDATE middag
        SET antal_personer = antal_personer - 1
        WHERE middag_id = @usergiven_m_id

        -- feedback på update statement:
        SELECT
            *
        FROM middag
        WHERE middag_id = @usergiven_m_id


Receptionist:
    [NF6] Se lediga rum av en viss typ en viss tidsperiod, 
        viz. en kund vill boka ett enkelrum
        -> gå in i bokning, gå in och kolla all data, ta bort träffar där någon av dagarna
        inom tidsperioden har träff mellan ett derivade value som utgår ifrån:
            -> checkatin och checkatut ==> tabell med datum upptaget. 
            hämta alla rum_id som ej ej har träffar där.
        -> ta upp lista ur "join" från rum och rum_typ där rum id är från förra steget.
        -> skapa ny lista utifrån "join" med den rumtypen man söker och de rum som uppfyller kraven.
        -- SELECT pseudo.start_ledigt, pseudo.slut_ledigt ,r.rum_id, r.rum_typ_id //med nested query där pseudo är derived.
        -- 237-239 datatyp som heter Interval som håller DATETIME eller YEARMONTH. Ev. fixa en sådan med DATETIME eller deriva en sådan?
        
        *** SQL QUERY:::
        -- Usecase vill söka efter lediga enkelrum rum perioden 2024-11-01 - 2024-11-07
        SET @usergiven_start_date = '2024-11-01', @usergiven_end_date = '2024-11-07', @usergiven_r_t = 'enkelrum';
        SELECT 
            ROW_NUMBER() OVER (ORDER BY erbjudande_id) AS '#',
            r.rum_id, 
            r.rum_typ_id, 
            COUNT(*) OVER () AS 'antal sökträffar' 
            FROM rum r
            LEFT JOIN bokning b -- LEFT JOIN: tar med alla rum även om de inte har en match i bokning. Kollar att de i bokning ej överlappar.
                ON (b.rum_id = r.rum_id 
                    AND @usergiven_end_date > b.incheckning -- tar bort rum som har bokning med incheckning innan önskat slutdatum
                    AND @usergiven_start_date < b.utcheckning -- tar bort rum som har bokning med utcheckning efter önskat startdatum
                    )
                WHERE b.rum_id IS NULL -- för att göra en Left Anti Join.
                AND r.rum_typ_id = @usergiven_r_t -- för att bara ta fram enkelrummen;

-- region
    [NF7] Boka rum  <<<<
        ***Går vidare från förra steget ovan***
        gå in bokning med valt rum_id från förra steget, updatera/insert bokning. 
            updatera/insert kund´
            updatera/insert huvud_gäst
            updatera/insert faktura
                *** tänk på ordningen av operationer här: vilken tabell i vilken ordning? "Insert order per build1.txt"

        *** SQL QUERY::: (Usecase boka ett enkelrum för en person perioden 2024-11-01 - 2024-11-07, ny kund samt huvudgäst)

        -- fortsättning efter att ha genomfört NF6: först måste man se att det finns ett ledigt rum såklart.
        INSERT INTO huvud_gast (fornamn, efternamn, mejl_address, telefon_nummer) 
        VALUES ('Anders', 'Andersson', 'AndAnd@resebokning.com', '+46731234567');
        SET @huvud_gast_id_fr_insert_huvud_gast = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert

        INSERT INTO kund (fornamn, efternamn, mejl_address, telefon_nummer) 
        VALUES ('Bertil', 'Bengtsson', 'BerBen@example.com', '+46701234567');
        SET @kund_id_fr_insert_kund = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert

        INSERT INTO faktura (personal_id, erbjudande_id) 
        VALUES (1, NULL);
        SET @faktura_id_fr_insert_faktura = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert

        
        SET @user_inp_r_t = 'enkelrum';
        SELECT rum_pris_id INTO @rum_pris_id_fr_select_rum_pris
        FROM rum_pris
        WHERE ( 
            (Now() BETWEEN `start` AND slut) 
            AND 
            (rum_typ_id = @user_inp_r_t)
            ); 

        SET @usergiven_start_date = '2024-11-01', @usergiven_end_date = '2024-11-07',
        @user_inp_rum_id = 1, @user_inp_personal_id = 1, @user_inp_antal_gaster = 2;
        INSERT INTO bokning (
            rum_id, 
            kund_id,
            huvud_gast_id, 
            personal_id, 
            rum_pris_id, 
            faktura_id, 
            bokning_datum, 
            antal_gaster, 
            incheckning, utcheckning
            ) 
            VALUES (
                @user_inp_rum_id, 
                @kund_id_fr_insert_kund, 
                @huvud_gast_id_fr_insert_huvud_gast, 
                @user_inp_personal_id, 
                @rum_pris_id_fr_select_rum_pris, 
                @faktura_id_fr_insert_faktura, 
                Now(), 
                @user_inp_antal_gaster, 
                @usergiven_start_date, 
                @usergiven_end_date 
                );
-- endregion

    [NF8] Boka rum för grupp <<<<
         *** SQL QUERY::: (Usecase boka två enkelrum för en person vardera perioden 2024-11-01 - 2024-11-07, ny kund samt huvudgäster)

        INSERT INTO huvud_gast (fornamn, efternamn, mejl_address, telefon_nummer) 
        VALUES ('Caroline', 'Carlsson', 'CarCar@exempel.com', '+46731234561');
        SET @huvud_gast_id_fr_insert_a = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert
        
        INSERT INTO huvud_gast (fornamn, efternamn, mejl_address, telefon_nummer) 
        VALUES ('Daniel', 'Davidsson', 'AndAnd@exempel.com', '+46731234562');
        SET @huvud_gast_id_fr_insert_b = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert

        INSERT INTO kund (fornamn, efternamn, mejl_address, telefon_nummer) 
        VALUES ('Emil', 'Eriksson', 'EmiEri@example.com', '+46701234563');
        SET @kund_id_fr_insert = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert

        INSERT INTO grupp_bokning ()
        VALUES ();
        SET @grupp_bokning_id_fr_insert = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert

        INSERT INTO faktura (personal_id, erbjudande_id) 
        VALUES (1, NULL);
        SET @faktura_id_fr_insert_1 = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert

        INSERT INTO faktura (personal_id, erbjudande_id) 
        VALUES (1, NULL);
        SET @faktura_id_fr_insert_2 = LAST_INSERT_ID(); -- senaste PK som används, dvs för denna insert

        SET @user_inp_rum_typ = 'enkelrum'
        SELECT rum_pris_id INTO @rum_pris_id_fr_select
        FROM rum_pris
        WHERE (
            (Now() BETWEEN `start` AND slut) 
            AND 
            (rum_typ_id = @user_inp_rum_typ)
            ); 

        SET @user_inp_start_date = '2024-11-01', @user_inp_end_date = '2024-11-07'
        INSERT INTO bokning (
            rum_id,
            kund_id, 
            huvud_gast_id, 
            personal_id,
            rum_pris_id, 
            faktura_id,
            grupp_bokning_id, 
            bokning_datum,
            antal_gaster, 
            incheckning,
            utcheckning
            ) 
            VALUES (
                    5, 
                    @kund_id_fr_insert, 
                    @huvud_gast_id_fr_insert_a, 
                    1, 
                    @rum_pris_id_fr_select, 
                    @faktura_id_fr_insert_1, 
                    @grupp_bokning_fr_insert, 
                    Now(), 2, 
                    @user_inp_start_date, 
                    @user_inp_end_date -- given av personalen i dialog med kund utifrån tidigare bild på lediga rum.
                ),
                (
                    8, 
                    @kund_id_fr_insert, 
                    @huvud_gast_id_fr_insert_b, 
                    1, 
                    @rum_pris_id_fr_select, 
                    @faktura_id_fr_insert_2, @grupp_bokning_fr_insert, 
                    Now(), 
                    2, 
                    @user_inp_start_date, 
                    @user_inp_end_date 
                );


    [NF9] Boka middag för grupp
        *** relativt enkel *** 
        gå via gruppbokning till middag, lägg in nytt objekt i middag och uppdatera fältet för foreign key till den gruppbokningen det gäller.
        ** EXAMPLE QUERY:
        INSERT INTO middag 
            (
            grupp_bokning_id,
            antal_personer,
            datum
            )
            VALUES 
            (
            1,
            8,
            '2025-01-20 18:00:00'
            );
    
    
    [NF10] Se aktuella priser 
        Kolla pris för visst typ av rum. 
        ** motivera i rapport varför vi visar rumpris och erbjudande separat
        --> Ta fram aktuellt pris för rummet
        *** SQL QUERY::: 
        -- Usecase kund vill veta aktuellt pris för enkelrum 
        SELECT pris_per_natt, `start`, slut FROM rum_pris
        WHERE rum_typ_id = "enkelrum" AND `start` < now() AND slut > now(); 

    [NF11] Se aktuella erbjudanden
        Får en lista med erbjudanden som är aktuella
        *** SQL QUERY::: 
        SELECT * FROM erbjudande
        WHERE `start` < now() AND slut > now(); 

    [NF12] Se pris / erbjudande som gällde när bokningen gjordes; som gäller för fakturan. detta är för debiteringen i slutet.
        Gå via bokning till faktura -> Kolla om det finns erbjudande i faktura
        Kontrollera bokningsdatum
        vi vill kunna ta upp ett pris och erbjudande för en viss bokning. 

            Söka i rum_pris efter det pris för rumtypen som var aktuellt när bokningen gjordes, derived value som utgår ifrån:
                -> rum_pris.start -> rum_pris.slut 
            ** På samma sätt som vi söker efter ledigt rum
            *** SQL QUERY::: 
            SET @user_inp_bokning_id = 2
            SELECT 
                rp.pris_per_natt, 
                e.prisavdrag, 
                e.villkor, 
                b.bokning_id, 
                f.faktura_id, 
                f.personal_id
	        FROM bokning b
	        INNER JOIN faktura f ON b.faktura_id = f.faktura_id
	        INNER JOIN rum_pris rp ON b.rum_pris_id = rp.rum_pris_id
            LEFT JOIN erbjudande e ON f.erbjudande_id = e.erbjudande_id
	        WHERE bokning_id = @user_inp_bokning_id;  

    [NF13] Checka in (huvud)gäster
        ** Kan ske både med gästens namn / telefonnummer och med boknings-id
        Söka fram rummet som hör till bokningen 
            -> Kontrollera att rummet är utcheckat
            -> Uppdatera checked_in till TRUE  (och checked_out till FALSE) 
        -- Med till rapporten: Vad ska vi söka på? Usecase person kommer till reception och checkar in. Har då med sig 
        -- WHERE CLAUSE NEEDS: AND r.status = "pending"
                    SET @user_inp_bokning_id = 52;
                    UPDATE rum r
                    INNER JOIN bokning b ON r.rum_id = b.rum_id
                    SET r.status = "checkat_in"
                    WHERE (
                        r.status = "checkat_ut" 
                        AND b.bokning_id = @user_inp_bokning_id 
                        AND b.incheckning = CURDATE()
                        );

                    FÖR TEST:::
                    SELECT * FROM rum
                    INNER JOIN bokning b ON r.rum_id = b.rum_id
                    WHERE (
                        r.status = "checkat_ut" 
                        AND b.bokning_id = @user_inp_bokning_id 
                        AND b.incheckning = CURDATE()
                        );


    [NF14] Checka ut (huvud)gäster
        ** Kan ske både med gästens namn / telefonnummer och med boknings-id
        Söka fram rummet som hör till bokningen 

            -- Faktisk SQL sats

            SET @user_inp_bokning_id = 51
            UPDATE rum r
                    INNER JOIN bokning b ON r.rum_id = b.rum_id
                    SET r.status = "checkat_ut"
                    WHERE (
                        r.status = "checkat_in" 
                        AND b.bokning_id = @user_inp_bokning_id 
                        AND b.utcheckning <= CURDATE()
                        );

            SELECT * 
            FROM rum r 
            WHERE bokning_id = @user_inp_bokning_id;

    [NF15] Se om gäst checkat in -- BEHÖVER MOTIVERA I RAPPORT ATT VI TOLKAR DETTA SOM ATT SE STATUS PÅ RUM FÖR EN GÄST.
        Gå från huvud_gast -> bokning -> rum
            - Sök upp huvud_gast_id från gästens namn
            - Hitta bokning-ID som har den huvudgästen
            - Sortera ut den bokningen som gäller just nu
            - Gå till rum som är kopplat till bokningen
            - Kontrollera status på rummet

            SET @user_inp_bokning_id = 52;
            SELECT 
                hg.fornamn, 
                hg.efternamn, 
                r.status, 
                b.incheckning, 
                b.utcheckning
            FROM huvud_gast hg
            INNER JOIN bokning b ON hg.huvud_gast_id = b.huvud_gast_id
            INNER JOIN rum r ON b.rum_id = r.rum_id
            WHERE (
                b.incheckning <= CURDATE()
                AND b.utcheckning >= CURDATE()
                AND b.bokning_id = @user_inp_bokning_id
                );
    
    [NF16] Ändra datum i bokningar
        Updatesats i bokning.incheck och/eller bokning.utcheck
        *** SQL QUERY:::
            SET @user_inp_start_d = '2024-12-01', @user_inp_end_d = '2024-12-15', @user_inp_b_id = 1;
            UPDATE bokning SET (
                incheckning = @user_inp_start_d, 
                utcheckning = @user_inp_end_d
                )
            WHERE bokning_id = @user_inp_b_id;
    
    [NF17] Skriva ut räkning för bokningar 
        Tolkning: Få ut data nödvändigt för att summera priset
        Betalnings-spec/kvitto?
        Input från användaren:
            bokning_id
        Data från databas som behövs:
            Antalet nätter
                derived från incheckning och utcheckning i bokning
            Pris per natt
                bokning.rum_pris
            Försäljningssummor
                Från försäljning.summa, via faktura

            -- SQL QUERY::
            FIXME: lägg till erbjudande
            FIXME: i rum_pris, vi kontrollerar ej om priset är aktuellt eller inte. ej mot rum_typ heller. 
            # Nu utgår vi att det är rätt info där.
            SET @user_inp_bokning_id = 20;
            SELECT 
                b.bokning_id,
                b.faktura_id, 
                b.huvud_gast_id, 
                CONCAT(hg.fornamn,' ', hg.efternamn) AS 'gästnamn', 
                b.kund_id, 
                CONCAT(k.fornamn,' ', k.efternamn) AS 'kundnamn', 
                b.incheckning, 
                b.utcheckning,
                DATEDIFF(b.utcheckning, b.incheckning) AS 'antal nätter',
                rp.pris_per_natt, 
                IFNULL(SUM(fo.summa), 0) AS 'försäljning',
                IFNULL(e.prisavdrag, 0) AS 'erbjudande rabatt kr',
                (
                    DATEDIFF(b.utcheckning, b.incheckning) * rp.pris_per_natt - IFNULL(e.prisavdrag, 0) + IFNULL(SUM(fo.summa), 0)
                ) AS "tot pris exkl. erbjudande",
                (
                    DATEDIFF(b.utcheckning, b.incheckning) * rp.pris_per_natt - IFNULL(e.prisavdrag, 0) + IFNULL(SUM(fo.summa), 0)
                ) AS "tot pris med ev. erbjudande"
            FROM bokning b 
                INNER JOIN rum_pris rp ON b.rum_pris_id = rp.rum_pris_id
                LEFT JOIN forsaljning fo ON b.faktura_id = fo.faktura_id
                INNER JOIN kund k ON b.kund_id = k.kund_id
                INNER JOIN huvud_gast hg ON b.huvud_gast_id = hg.huvud_gast_id
                LEFT JOIN faktura fa ON b.faktura_id = fa.faktura_id
                LEFT JOIN erbjudande e ON e.erbjudande_id = fa.erbjudande_id
            WHERE (
                b.faktura_id IS NOT NULL 
                AND b.bokning_id = @user_inp_bokning_id
                )
            GROUP BY b.bokning_id;


    [NF18]Skriva ut räkning för gruppbokningar
        >>>>: TOLKNING AV UPPGIFT:
            - middag?
            ===> ta med antal middagar med antal personer. De får manuellt räkna ut debiteringen utifrån detta.
            motivera: lägga till kostnad för middag (ej med ty: skulle kräva dialog först)

        SET @user_inp_grupp_bokning_id = 2;
        SELECT 
            b.bokning_id, 
            b.faktura_id, 
            b.huvud_gast_id, 
            CONCAT(hg.fornamn,' ', hg.efternamn) AS 'gästnamn', 
            b.kund_id, CONCAT(k.fornamn,' ', k.efternamn) AS 'kundnamn', 
            rp.pris_per_natt,
            IFNULL(SUM(fo.summa), 0) AS 'försäljning',
            IFNULL(e.prisavdrag, 0) AS 'erbjudande rabatt kr',
            (
                DATEDIFF(b.utcheckning, b.incheckning) * rp.pris_per_natt - IFNULL(e.prisavdrag, 0) + IFNULL(SUM(fo.summa), 0)
                ) AS "tot pris exkl. erbjudande",
            (
                DATEDIFF(b.utcheckning, b.incheckning) * rp.pris_per_natt - IFNULL(e.prisavdrag, 0) + IFNULL(SUM(fo.summa), 0)
                ) AS "tot pris med ev. erbjudande"
        FROM bokning b 
        INNER JOIN rum_pris rp ON b.rum_pris_id = rp.rum_pris_id
        LEFT JOIN forsaljning fo ON b.faktura_id = fo.faktura_id
        INNER JOIN kund k ON b.kund_id = k.kund_id
        INNER JOIN huvud_gast hg ON b.huvud_gast_id = hg.huvud_gast_id
        LEFT JOIN faktura fa ON b.faktura_id = fa.erbjudande_id
        LEFT JOIN erbjudande e ON e.erbjudande_id = fa.erbjudande_id
        WHERE b.grupp_bokning_id = 2
        GROUP BY b.bokning_id;
        
        SELECT
            b.incheckning, 
            b.utcheckning, 
            b.personal_id, 
            m.antal_personer, 
            m.middag_id
        FROM bokning b
        JOIN faktura fa ON b.grupp_bokning_id = fa.grupp_bokning_id
        JOIN middag m ON b.grupp_bokning_id = m.grupp_bokning_id
        
        
        

    



Städare:
    [NF19] Se vilka rum som är utcheckade
        Relativt enkel select-sats
        *** SQL QUERY:::
        SELECT rum_id, `status`, rum_typ_id  FROM rum 
        WHERE `status` = 'checkat_ut';

Från handledare.
SELECT, UPDATE OCH INSERT SKA VARA MED.
minst tre av SQL satserna ska göra en sökning i flera tabeller, 
visa på både JOIN och NESTAD
använd minst en funktion t.ex. count eller group by.